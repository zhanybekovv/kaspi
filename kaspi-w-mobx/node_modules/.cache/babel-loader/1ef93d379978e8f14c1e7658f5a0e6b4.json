{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, createContext } from 'react';\nimport { observable, action, makeObservable } from 'mobx';\nimport MainPage from './components/MainPage';\nimport structure from './structure.json';\nimport employees from './employees.json';\nimport './App.css';\nconst divisionId = observable({\n  selectedDivisionId: '0'\n});\nexport const DivisionIdContext = /*#__PURE__*/createContext(null);\n\nclass Store {\n  constructor() {\n    this.employees = void 0;\n    this.divisions = new Map();\n\n    this.getMapped = divisions => {\n      divisions && divisions.map((struct, index) => {\n        this.divisions.set(struct.id, struct);\n\n        if (struct.subdivisions) {\n          this.getMapped(struct.subdivisions);\n        }\n      });\n    };\n\n    this.getEmployeesByDivision = id => {\n      return this.employees.filter(empl => {\n        return empl.divisionId == id;\n      });\n    };\n\n    this.getEmployeeById = id => {\n      return this.employees.find(empl => empl.id === id).name;\n    };\n\n    this.getEmployees = () => {\n      return this.employees.map(empl => empl.id);\n    };\n\n    this.getDivisions = () => {\n      return Array.from(this.divisions.keys());\n    };\n\n    this.getDivision = id => {\n      return this.divisions.get(id);\n    };\n\n    makeObservable(this, {\n      employees: observable,\n      divisions: observable,\n      addNewEmployee: action,\n      editEmployee: action\n    });\n    this.employees = employees;\n    this.getMapped(structure);\n  }\n\n  addNewEmployee(name, divisionId) {\n    this.employees.push({\n      id: Math.round(Math.random() * 1000),\n      name,\n      divisionId\n    });\n  }\n\n  editEmployee(name, id) {\n    this.employees.forEach(employee => {\n      if (employee.id === id) {\n        employee.name = name;\n      }\n    });\n  }\n\n  search(name) {\n    if (!name || name.length === 0) {\n      return this.getDivisions();\n    }\n\n    return this.getDivisions().filter(divs => {\n      var _this$getDivision;\n\n      return (_this$getDivision = this.getDivision(divs)) === null || _this$getDivision === void 0 ? void 0 : _this$getDivision.name.includes(name);\n    });\n  } // filter  = (query: string, divisions: Structure[]): SubdivisionFilterModel[] => {\n  //   const result: SubdivisionFilterModel[] = [];\n  //   divisions && divisions.forEach((struct, index) => {\n  //     const subdiv = this.filter(query, struct.subdivisions);\n  //     if ((subdiv && subdiv.length > 0) || struct.name.includes(query)) {\n  //       result.push({\n  //         id: struct.id,\n  //         name: struct.name,\n  //         subdivisions: subdiv,\n  //       })\n  //     }\n  //   })\n  //   return result;\n  // }\n\n\n}\n\nconst store = new Store();\nconst StoreContext = /*#__PURE__*/createContext(null);\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: store,\n    children: /*#__PURE__*/_jsxDEV(DivisionIdContext.Provider, {\n      value: divisionId,\n      children: /*#__PURE__*/_jsxDEV(MainPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport const useAuth = () => {\n  _s();\n\n  return useContext(StoreContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/App.tsx"],"names":["React","useContext","createContext","observable","action","makeObservable","MainPage","structure","employees","divisionId","selectedDivisionId","DivisionIdContext","Store","constructor","divisions","Map","getMapped","map","struct","index","set","id","subdivisions","getEmployeesByDivision","filter","empl","getEmployeeById","find","name","getEmployees","getDivisions","Array","from","keys","getDivision","get","addNewEmployee","editEmployee","push","Math","round","random","forEach","employee","search","length","divs","includes","store","StoreContext","App","useAuth"],"mappings":"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","sourcesContent":["import React, { useContext, createContext } from 'react';\nimport { observable, action, makeObservable } from 'mobx'\n\nimport MainPage from './components/MainPage'\nimport { Structure } from './props'\n \nimport structure from './structure.json'\nimport employees from './employees.json'\n\nimport './App.css';\n\ntype DivisionId = {\n  selectedDivisionId: string;\n}\n\nconst divisionId = observable({\n  selectedDivisionId: '0',\n});\n\n\nexport const DivisionIdContext = createContext<DivisionId>(null as any)\n\n\nclass Store {\n  employees:any[];\n  divisions = new Map<string, Structure>();\n  \n  constructor(){\n    makeObservable(this, {\n      employees: observable,\n      divisions: observable,\n      addNewEmployee: action,\n      editEmployee: action\n    })\n    this.employees = employees;\n    this.getMapped(structure as any)\n  }\n  \n  getMapped = (divisions: Structure[]) => {\n    divisions && divisions.map((struct, index) => {\n      this.divisions.set(struct.id, struct)\n      if (struct.subdivisions) {\n        this.getMapped(struct.subdivisions);\n      }\n    })\n  }\n  getEmployeesByDivision = (id: string) => {\n    return (\n      this.employees.filter(empl => {\n       return empl.divisionId == id\n      })\n    )\n  }\n\n  getEmployeeById = (id: number) => {\n    return (\n      this.employees.find(empl => empl.id === id).name\n    )\n  }\n\n  addNewEmployee(name: string, divisionId: string) {\n    this.employees.push({id: Math.round(Math.random()*1000), name, divisionId})\n  }\n\n  editEmployee(name: string, id: number) {\n    this.employees.forEach((employee) => {\n      if(employee.id === id){\n        employee.name = name\n      }\n    })\n  }\n\n  getEmployees = () => {\n    return this.employees.map(empl => empl.id)\n  }\n\n  getDivisions = () => {\n    return Array.from(this.divisions.keys())\n  }\n\n  search(name: string){\n    if(!name || name.length === 0){\n      return this.getDivisions()\n    }\n    return this.getDivisions().filter(divs => this.getDivision(divs)?.name.includes(name) )\n  }\n\n  // filter  = (query: string, divisions: Structure[]): SubdivisionFilterModel[] => {\n  //   const result: SubdivisionFilterModel[] = [];\n  \n  //   divisions && divisions.forEach((struct, index) => {\n  //     const subdiv = this.filter(query, struct.subdivisions);\n  //     if ((subdiv && subdiv.length > 0) || struct.name.includes(query)) {\n  //       result.push({\n  //         id: struct.id,\n  //         name: struct.name,\n  //         subdivisions: subdiv,\n  //       })\n  //     }\n  //   })\n  //   return result;\n  // }\n\n  getDivision = (id: string) => {\n    return this.divisions.get(id);\n  }\n\n}\n\nconst store = new Store();\n\nconst StoreContext = createContext<Store>(null as any);\n\nconst App = () => {\n\n  return (\n    <StoreContext.Provider value={store}>\n      <DivisionIdContext.Provider value={divisionId}>\n        <MainPage />\n      </DivisionIdContext.Provider>\n    </StoreContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  return useContext(StoreContext)\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}