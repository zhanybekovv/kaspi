[{"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/index.tsx":"1","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/reportWebVitals.ts":"2","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/App.tsx":"3","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/MainPage/index.tsx":"4","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Divisions/index.tsx":"5","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/EmployeePage/index.tsx":"6","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Forms/SearchForm/index.tsx":"7","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/AutoSize.tsx":"8","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Subdivision/index.tsx":"9","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Forms/AddForm/index.tsx":"10","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Employees/index.tsx":"11","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Employee/index.tsx":"12"},{"size":500,"mtime":1612281171440,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1612281171440,"results":"15","hashOfConfig":"14"},{"size":2973,"mtime":1612281171436,"results":"16","hashOfConfig":"14"},{"size":1065,"mtime":1612281171436,"results":"17","hashOfConfig":"14"},{"size":597,"mtime":1623815929681,"results":"18","hashOfConfig":"14"},{"size":336,"mtime":1612281171436,"results":"19","hashOfConfig":"14"},{"size":756,"mtime":1612281171436,"results":"20","hashOfConfig":"14"},{"size":1229,"mtime":1623815497075,"results":"21","hashOfConfig":"14"},{"size":1393,"mtime":1623815538849,"results":"22","hashOfConfig":"14"},{"size":1177,"mtime":1612281171436,"results":"23","hashOfConfig":"14"},{"size":649,"mtime":1612281171436,"results":"24","hashOfConfig":"14"},{"size":1638,"mtime":1612281171436,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"n16odv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/index.tsx",[],["53","54"],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/reportWebVitals.ts",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/App.tsx",["55","56"],"import React, { useContext, createContext } from 'react';\nimport { observable, action, makeObservable } from 'mobx'\n\nimport MainPage from './components/MainPage'\nimport { Structure } from './props'\n \nimport structure from './structure.json'\nimport employees from './employees.json'\n\nimport './App.css';\n\ntype DivisionId = {\n  selectedDivisionId: string;\n}\n\nconst divisionId = observable({\n  selectedDivisionId: '0',\n});\n\n\nexport const DivisionIdContext = createContext<DivisionId>(null as any)\n\n\nclass Store {\n  employees:any[];\n  divisions = new Map<string, Structure>();\n  \n  constructor(){\n    makeObservable(this, {\n      employees: observable,\n      divisions: observable,\n      addNewEmployee: action,\n      editEmployee: action\n    })\n    this.employees = employees;\n    this.getMapped(structure as any)\n  }\n  \n  getMapped = (divisions: Structure[]) => {\n    divisions && divisions.map((struct, index) => {\n      this.divisions.set(struct.id, struct)\n      if (struct.subdivisions) {\n        this.getMapped(struct.subdivisions);\n      }\n    })\n  }\n  getEmployeesByDivision = (id: string) => {\n    return (\n      this.employees.filter(empl => {\n       return empl.divisionId == id\n      })\n    )\n  }\n\n  getEmployeeById = (id: number) => {\n    return (\n      this.employees.find(empl => empl.id === id).name\n    )\n  }\n\n  addNewEmployee(name: string, divisionId: string) {\n    this.employees.push({id: Math.round(Math.random()*1000), name, divisionId})\n  }\n\n  editEmployee(name: string, id: number) {\n    this.employees.forEach((employee) => {\n      if(employee.id === id){\n        employee.name = name\n      }\n    })\n  }\n\n  getEmployees = () => {\n    return this.employees.map(empl => empl.id)\n  }\n\n  getDivisions = () => {\n    return Array.from(this.divisions.keys())\n  }\n\n  search(name: string){\n    if(!name || name.length === 0){\n      return this.getDivisions()\n    }\n    return this.getDivisions().filter(divs => this.getDivision(divs)?.name.includes(name) )\n  }\n\n  // filter  = (query: string, divisions: Structure[]): SubdivisionFilterModel[] => {\n  //   const result: SubdivisionFilterModel[] = [];\n  \n  //   divisions && divisions.forEach((struct, index) => {\n  //     const subdiv = this.filter(query, struct.subdivisions);\n  //     if ((subdiv && subdiv.length > 0) || struct.name.includes(query)) {\n  //       result.push({\n  //         id: struct.id,\n  //         name: struct.name,\n  //         subdivisions: subdiv,\n  //       })\n  //     }\n  //   })\n  //   return result;\n  // }\n\n  getDivision = (id: string) => {\n    return this.divisions.get(id);\n  }\n\n}\n\nconst store = new Store();\n\nconst StoreContext = createContext<Store>(null as any);\n\nconst App = () => {\n\n  return (\n    <StoreContext.Provider value={store}>\n      <DivisionIdContext.Provider value={divisionId}>\n        <MainPage />\n      </DivisionIdContext.Provider>\n    </StoreContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  return useContext(StoreContext)\n}\nexport default App;\n","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/MainPage/index.tsx",["57"],"import React, { FC, useState } from 'react'\nimport { observer } from 'mobx-react-lite'\n\nimport EmployeePage from '../EmployeePage'\nimport SearchForm from '../Forms/SearchForm'\nimport Divisions from '../Divisions'\nimport AutoSize from '../AutoSize'\n\n\nconst MainPage: FC = observer(() => {\n\n  const [value, setValue] = useState('')\n  const [showEmployees, setShowEmployees] = useState(false)\n\n\n  return (\n    <div style={{ padding: '20px', display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n      <div style={{ border: '1px solid black', width: 600}}>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', padding: 8}}>\n          <SearchForm setValue={setValue} />\n          <button onClick={() => setShowEmployees(!showEmployees)}>\n            Показать сотрудников\n          </button>\n        </div>\n        <Divisions value={value} />\n      </div>\n      {\n        showEmployees ?\n            <EmployeePage /> \n        : <div></div>\n      }\n    </div>\n  )\n})\n\nexport default MainPage\n","/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Divisions/index.tsx",["58","59"],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/EmployeePage/index.tsx",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Forms/SearchForm/index.tsx",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/AutoSize.tsx",["60"],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Subdivision/index.tsx",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Forms/AddForm/index.tsx",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Employees/index.tsx",[],"/home/norton/Documents/frontEnd/kaspi/my-app/kaspi-w-mobx/src/components/Employee/index.tsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":40,"column":48,"nodeType":"67","messageId":"68","endLine":40,"endColumn":50},{"ruleId":"69","severity":1,"message":"70","line":50,"column":31,"nodeType":"71","messageId":"72","endLine":50,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"78","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":19},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'AutoSize' is defined but never used.","Identifier","unusedVar","'FixedSizeList' is defined but never used.","'ReactNode' is defined but never used.","no-global-assign","no-unsafe-negation"]